name: Automatic Semantic Versioning

on:
  workflow_dispatch:
    inputs:
      force:
        description: 'Force tag creation even if it already exists'
        required: false
        default: false
        type: boolean
  push:
    branches: [main]
    paths:
      - 'pyproject.toml'
      - 'src/dll_scanner/__init__.py'

jobs:
  create-version-tag:
    name: "Create Semantic Version Tag"
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating tags
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Extract version from pyproject.toml
      id: extract-version
      run: |
        # Extract version using Python's tomllib (available in Python 3.11+)
        VERSION=$(python -c "
        import tomllib
        with open('pyproject.toml', 'rb') as f:
            data = tomllib.load(f)
        print(data['project']['version'])
        ")
        
        echo "Found version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT

    - name: Verify version consistency
      run: |
        PYPROJECT_VERSION="${{ steps.extract-version.outputs.version }}"
        INIT_VERSION=$(python -c "
        import sys
        sys.path.insert(0, 'src')
        import dll_scanner
        print(dll_scanner.__version__)
        ")
        
        echo "pyproject.toml version: $PYPROJECT_VERSION"
        echo "src/dll_scanner/__init__.py version: $INIT_VERSION"
        
        if [ "$PYPROJECT_VERSION" != "$INIT_VERSION" ]; then
          echo "ERROR: Version mismatch between pyproject.toml ($PYPROJECT_VERSION) and __init__.py ($INIT_VERSION)"
          exit 1
        fi
        
        echo "Version consistency verified: $PYPROJECT_VERSION"

    - name: Check if tag exists
      id: check-tag
      run: |
        TAG="${{ steps.extract-version.outputs.tag }}"
        
        if git tag -l | grep -q "^$TAG$"; then
          echo "Tag $TAG already exists"
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "Tag $TAG does not exist"
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create semantic version tag
      if: steps.check-tag.outputs.exists == 'false' || github.event.inputs.force == 'true'
      run: |
        TAG="${{ steps.extract-version.outputs.tag }}"
        VERSION="${{ steps.extract-version.outputs.version }}"
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        if [ "${{ github.event.inputs.force }}" == "true" ] && [ "${{ steps.check-tag.outputs.exists }}" == "true" ]; then
          echo "Force flag is set, deleting existing tag $TAG"
          git tag -d "$TAG" || true
          git push origin --delete "$TAG" || true
        fi
        
        # Create annotated tag with version information
        git tag -a "$TAG" -m "Release version $VERSION

        This tag was automatically created by the semantic versioning workflow.
        
        Version: $VERSION
        Commit: ${{ github.sha }}
        Workflow: ${{ github.workflow }}
        Run: ${{ github.run_number }}"
        
        # Push the tag
        git push origin "$TAG"
        
        echo "Successfully created and pushed tag: $TAG"

    - name: Create release notes
      if: steps.check-tag.outputs.exists == 'false' || github.event.inputs.force == 'true'
      run: |
        TAG="${{ steps.extract-version.outputs.tag }}"
        VERSION="${{ steps.extract-version.outputs.version }}"
        
        echo "# Release $TAG" > release-notes.md
        echo "" >> release-notes.md
        echo "Automatically generated semantic version tag for DLL Scanner $VERSION." >> release-notes.md
        echo "" >> release-notes.md
        echo "## What's Included" >> release-notes.md
        echo "" >> release-notes.md
        echo "- **Version:** $VERSION" >> release-notes.md
        echo "- **Commit:** \`${{ github.sha }}\`" >> release-notes.md
        echo "- **Created:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> release-notes.md
        echo "" >> release-notes.md
        echo "## Installation" >> release-notes.md
        echo "" >> release-notes.md
        echo "\`\`\`bash" >> release-notes.md
        echo "pip install dll-scanner==$VERSION" >> release-notes.md
        echo "\`\`\`" >> release-notes.md
        echo "" >> release-notes.md
        echo "For detailed changes, see the [CHANGELOG.md](https://github.com/FlaccidFacade/dll-scanner/blob/main/CHANGELOG.md)." >> release-notes.md
        
        cat release-notes.md

    - name: Summary
      run: |
        TAG="${{ steps.extract-version.outputs.tag }}"
        VERSION="${{ steps.extract-version.outputs.version }}"
        EXISTS="${{ steps.check-tag.outputs.exists }}"
        FORCE="${{ github.event.inputs.force }}"
        
        echo "## Semantic Versioning Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Project Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
        echo "- **Git Tag:** $TAG" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag Existed:** $EXISTS" >> $GITHUB_STEP_SUMMARY
        echo "- **Force Flag:** $FORCE" >> $GITHUB_STEP_SUMMARY
        echo "- **Action Taken:** " >> $GITHUB_STEP_SUMMARY
        
        if [ "$EXISTS" == "false" ] || [ "$FORCE" == "true" ]; then
          echo "  ✅ Tag created successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "  ⏭️ Skipped (tag already exists)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The tag \`$TAG\` is now available for creating releases and triggering the publish workflow." >> $GITHUB_STEP_SUMMARY